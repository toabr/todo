{"version":3,"sources":["components/header.js","components/list.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","type","name","placeholder","value","todo","onChange","e","onInputChange","onKeyPress","key","saveTodo","onClick","List","todos","map","index","Link","to","concat","deleteTodo","App","state","target","_this","setState","console","log","alert","push","splice","_this2","this","BrowserRouter","basename","className","Route","exact","path","render","match","params","id","Component","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAEe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,SACEC,KAAK,OACLC,KAAK,IACLC,YAAY,sBACZC,MAAOP,EAAMQ,KACbC,SAAU,SAACC,GAAD,OAAOV,EAAMW,cAAcD,IACrCE,WAAY,SAACF,GACG,UAAVA,EAAEG,KACJb,EAAMc,cAIZb,EAAAC,EAAAC,cAAA,UAAQY,QAASf,EAAMc,UAAvB,qBCfS,SAASE,EAAKhB,GAEzB,IAAIiB,EAAQjB,EAAMiB,MAAMC,IAAI,SAACV,EAAKW,GAChC,OACElB,EAAAC,EAAAC,cAAA,MAAIU,IAAKM,GACPlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAE,SAAAC,OAAWH,IAAUX,GAC7BP,EAAAC,EAAAC,cAAA,UAAQY,QAAU,kBAAMf,EAAMuB,WAAWJ,KAAzC,QAIN,OACElB,EAAAC,EAAAC,cAAA,UACGc,aCgDMO,6MAtDbC,MAAQ,CACNjB,KAAM,UACNS,MAAO,CAAC,MAAM,QAAQ,aAGxBN,cAAgB,SAACD,GACf,IAAIF,EAAOE,EAAEgB,OAAOnB,MACpBoB,EAAKC,SAAS,CAAEpB,KAAKA,IACrBqB,QAAQC,IAAI,kBAGdhB,SAAW,WACT,IAAIN,EAAOmB,EAAKF,MAAMjB,KACtB,GAAY,KAATA,EACDuB,MAAM,sBACD,CACL,IAAId,EAAQU,EAAKF,MAAMR,MACvBA,EAAMe,KAAKxB,GACXmB,EAAKC,SAAS,CAAEX,UAChBU,EAAKC,SAAS,CAAEpB,KAAK,KAErBqB,QAAQC,IAAI,WAAYtB,OAI5Be,WAAa,SAACJ,GACZ,IAAIF,EAAQU,EAAKF,MAAMR,MACvBA,EAAMgB,OAAOd,EAAO,GACpBQ,EAAKC,SAAS,CAAEX,MAAMA,IACtBY,QAAQC,IAAI,eAAgBX,4EAGrB,IAAAe,EAAAC,KACP,OACElC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAQC,SAAU,KACdpC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OAEbrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAS,kBAC7BzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACJ,EAAD,CAAQuC,UAAU,aAAa9B,KAAM0B,EAAKT,MAAMjB,KAAMM,SAAUoB,EAAKpB,SAAUH,cAAeuB,EAAKvB,gBACnGV,EAAAC,EAAAC,cAACa,EAAD,CAAMC,MAAOiB,EAAKT,MAAMR,MAAOM,WAAYW,EAAKX,iBAIpDtB,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAOE,KAAI,YAAeC,OAAS,SAAC1C,GAAD,OAC/BC,EAAAC,EAAAC,cAAA,mBAAW+B,EAAKT,MAAMR,MAAMjB,EAAM2C,MAAMC,OAAOC,iBA9C7CC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASP,MACvB,2DCZNQ,IAAST,OAAOzC,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b543fe1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default function Header(props) {\n  return(\n    <div>\n      <h1>todo</h1>\n      <input\n        type=\"text\"\n        name=\"q\"\n        placeholder=\"type your next todo\"\n        value={props.todo}\n        onChange={(e) => props.onInputChange(e)}\n        onKeyPress={(e) => {\n          if (e.key === 'Enter') {\n            props.saveTodo();\n          }\n        }}\n      />\n      <button onClick={props.saveTodo}>save</button>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default function List(props) {\n\n    let todos = props.todos.map((todo,index) => {\n      return (\n        <li key={index}>\n          <Link to={`/todo/${index}`}>{todo}</Link>\n          <button onClick={ () => props.deleteTodo(index) }>x</button>\n        </li>);\n    });\n\n    return(\n      <ul>\n        {todos}\n      </ul>\n    );\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Header from './components/header.js';\nimport List from './components/list.js';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todo: 'testing',\n    todos: ['eat','sleep','design']\n  }\n\n  onInputChange = (e) => {\n    let todo = e.target.value;\n    this.setState({ todo:todo });\n    console.log('inputChange');\n  }\n\n  saveTodo = () => {\n    let todo = this.state.todo;\n    if(todo === '') {\n      alert('todo is empty!');\n    } else {\n      let todos = this.state.todos;\n      todos.push(todo);\n      this.setState({ todos });\n      this.setState({ todo:'' });\n\n      console.log('saveTodo', todo);\n    }\n  }\n\n  deleteTodo = (index) => {\n    let todos = this.state.todos;\n    todos.splice(index, 1);\n    this.setState({ todos:todos });\n    console.log('deleteTodo @', index);\n  }\n\n  render() {\n    return (\n      <Router basename={'/'}>\n          <div className=\"App\">\n\n            <Route exact path=\"/\" render={ () => (\n              <div>\n                <Header className=\"App-header\" todo={this.state.todo} saveTodo={this.saveTodo} onInputChange={this.onInputChange} />\n                <List todos={this.state.todos} deleteTodo={this.deleteTodo} />\n              </div>\n            )}/>\n\n            <Route path={`/todo/:id`} render={ (props) => (\n                <h1>todo: {this.state.todos[props.match.params.id]}</h1>\n            )}/>\n\n          </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}